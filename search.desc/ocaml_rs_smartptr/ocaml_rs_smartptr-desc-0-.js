searchState.loadedDescShard("ocaml_rs_smartptr", 0, "This module provides a safe wrapper around <code>ocaml::Value</code> to …\nThis module provides additional utilities and extensions …\nThis module provides the <code>DynBox</code> smart pointer, which is a …\nThis module provides a <code>Registry</code> for managing type …\nThis module provides some stubs for OCaml (<code>extern &quot;C&quot;</code> …\nThe <code>Callable</code> trait represents a function or closure that …\nDescribes the arguments (i.e. calls OCamlDesc::ocaml_desc) …\nocaml_desc generates OCaml type signature for this Callable\nGenerates unique IDs for the function arguments. This …\nOCamlFunc is a wrapper around MlBox that represents an …\nCalls the OCaml function with the provided arguments. This …\nClones the OCamlFunc, creating a new instance with the …\nReturns the argument unchanged.\nConverts an OCaml value to an OCamlFunc. This function …\nCalls <code>U::from(self)</code>.\nCreates a new OCamlFunc from an OCaml value. This function …\nGenerates the OCaml type description for the function.\nGenerates a unique ID for the function.\nThis wrapper type around <code>ocaml::root::Root</code> allows sending …\nCreates a new rooted <code>ocaml::Value</code>, the root is obtained by …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes this <code>MlBox</code> to recover the original <code>ocaml::Value</code> …\nCreates a new <code>MlBox</code> out of <code>ocaml::Value</code>, taking an OCaml …\nRepresents a plugin for generating OCaml bindings. It …\nP1 is for a single type parameter ’x where x is const C: …\nP2 is for a two type parameters ’x,’y where x is const …\nSame as P2 but for three type parameters\nA wrapper around <code>ocaml::Value</code> that is printed by <code>ocaml_gen</code> …\nA trait that is implemented by <code>P1</code>, <code>P2</code>, etc., used as a …\nThin wrapper around T which adds ability to print T into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>WithTypeParams</code> instance and returns the inner …\nCreates a new <code>OcamlGenPlugin</code> instance.\nCreates a new <code>WithTypeParams</code> instance.\nGenerates the OCaml binding for the type with type …\nReturns the count of type parameters.\nReturns a string representation of the type parameters.\nMain function for stubs generation binaries. It collects …\nA smart pointer around the registry’s <code>DynArc</code> with …\nCoerces the <code>DynBox</code> to a handle of the specified type.\nCoerces the <code>DynBox</code> to a mutable handle of the specified …\nDefault From implementation is just creating an exclusive …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>DynBox</code> with a <code>Mutex</code>.\nCreates a <code>DynBox</code> with a <code>Mutex</code> out of a Box’ed T. Useful …\nCreates a <code>DynBox</code> with a <code>RwLock</code>.\nCreates a <code>DynBox</code> with a <code>RwLock</code> out of a Box’ed T. Useful …\nA type alias for a handle to a read-only reference of type …\nA type alias for a handle to a mutable reference of type …\nThe <code>Plugin</code> struct represents a plugin with an initializer …\nA struct representing type information, including the …\nCoerces a <code>DynArc</code> input to a handle of the specified output …\nCoerces a <code>DynArc</code> input to a mutable handle of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the type information for a given input type from …\nInitializes all registered plugins. This function is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Plugin</code> with the given initializer function.\nRegisters coercion functions for converting between types …\nRegisters a type in the global registry.\nRegisters type information in the global registry.")